## Priorities

* Split rstudio-and-code into two parts, each taking 60 minutes. Maybe rstudio-and-code and rstudio-and quarto? Current version takes 120 minutes. Should be 02a and 02b.  Quarto 1 Topic starts 02b.


* Split rstudio-and-github into two parts? It is currently 90 minutes. Maybe expand the second part so that both parts are 60 minutes. 04a and 04b. Split at Project 1 Topic. rstudio-and-github-a and rstudio-and-github-b.

* Make introduction 20 minutes longer. Think harder about what that material should be.





* Splits Quarto Websites into two tutorials. The first just sets up one or two websites and makes simple edits to all the relevant files. This would be assigned for Monday of week 3. The second does all the chopping of of index.qmd into different scripts and pieces. This is assigned for Monday of week 4. Current version of the tutorial takes 90 minutes. Should also add lots of discussion about what to do when quarto publish does not work.

* Add a discussion of file downloading and computer organization to the Terminal tutorial. Include some questions in which a student has to create a new project and download some files to it, and prove that they have done so with file_show() and list.files(). Main motivation is that too many students, at least on Windows, can't do that.

### Sharav 

Tutorial 24

* Find the complaints in Discord and email me the link. #tutorials channel? #general channel?
* Fix the complaints.
* general quality improvements, as with knowledge drops, typos and so on.s

### Ritvik 

Tutorial 26

* Find the complaints in Discord and email me the link. #tutorials channel? #general channel?
* Fix those complaints.
* Read: https://ppbds.github.io/tutorial.helpers/articles/books.html
* Re-read the chapter. Quality check for entire tutorial.
  

* Tighten some longer tutorials so that they are more like 60 minutes.

* Add positron tutorials as complements to RStudio Code/Github tutorials. 

### Current items


Rewrite Introduction. 


### Specific Chapter Issues


Q&A sections, at least in RStudio and Code.

Make more use of https://ggplot2-book.org/ and https://docs.posit.co/ide/user/

Maybe much of the material in Quarto R4DS chapter belongs in RStudio and Github chapter, allowing Quarto tutorial to focus on projects.

Do RStudio and Code and RStudio and Github tutorials link up well together? 

The styler package and its use seem important and worth discussing. See https://www.youtube.com/watch?v=_nAfJ-5nkcU&authuser=0 for other interesting options.


### Graduation Exercises

Jade's idea for "Exploration" sections at the end of each tutorial. Give students some choices. Let them explore. Let them make something. There is no wrong answer.

Might be nice if each middle chapter tutorial (like factors, dates and times, et cetera) finished with a beautiful plot which required the use of skills from that chapter to manipulate the data first. An example is babynames in Strings chapter.

Even better, instead of a line-by-line plot built in the tutorial, we should have students create this plot oustide of the tutorial. It should be an exercise, like RStudio and Github, which starts with a student making a repo, connecting it to an RStudio project, starting a quarto document, loading libraries and data, building a plot, rendering the document so it looks nice and then publishing the plot on the web. Students need more practice with all these steps.

One project might be: Make any plot you like! Maybe using `diamonds`. Maybe give some advice? Maybe a fork? Maybe Github pages? Would require creating an index.qmd. Maybe explain how to use the visual editor.

Don't forget to review stuff, like shortcut keys.

### Publishing Issues

Should we be exploring other ways, besides RPubs, of publishing individual pages? quarto publish quarto-pub quarto-1.qmd works! quarto publish gh-pages quarto-1.qmd also has real possibilities.

## Leftover Material from Chapter 29

Maybe find a home for this stuff?

The most important set of options controls if your code block is executed and what results are inserted in the finished report:

eval: false prevents code from being evaluated. (And obviously if the code is not run, no results will be generated). This is useful for displaying example code, or for disabling a large block of code without commenting each line.

include: false runs the code, but doesn’t show the code or results in the final document. Use this for setup code that you don’t want cluttering your report.

results: hide hides printed output; fig-show: hide hides plots.

error: true causes the render to continue even if code returns an error. This is rarely something you’ll want to include in the final version of your report, but can be very useful if you need to debug exactly what is going on inside your QMD. It’s also useful if you’re teaching R and want to deliberately include an error. The default, error: false causes rendering to fail if there is a single error in the document.

As you work more with knitr, you will discover that some of the default chunk options don’t fit your needs and you want to change them.

When inserting numbers into text, format() is your friend.

Lots more stuff on figures, caching, tables, et cetera.
