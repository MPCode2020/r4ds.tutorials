## Priorities

### Khang

* First, read the comments in Quarto Websites, especially this comment: "The `quarto_publish_site()` function from the quarto R package does not currently work with Quarto Pub. Since this is the only free (and easy to use) site for publishing websites, we have no choice but to run Quarto CLI, at least for publishing. Given that fact, it is easiest to use CLI for the whole tutorial. This might be worth re-visiting with after quarto 1.5 comes out."

* Second, do Quarto Websites as if you are a student and send me the html. Make sure your version of Quarto is at least 1.5.57. 

* Pay close attention to the website name and title issue.

* Can we use `quarto_create_project()` instead of the command line equivalent. It would be nice if students could be running commands from the Console the whole time.

* Should we do everything on Github pages??? Yes! I hope . . . See https://quarto.org/docs/publishing/

* Splits Quarto Websites into two tutorials. The first just sets up one or two websites and makes simple edits to all the relevant files. This would be assigned for Monday of week 3. The second does all the chopping of of index.qmd into different scripts and pieces. This is assigned for Monday of week 4. Current version of the tutorial takes 90 minutes. Should also add lots of discussion about what to do when quarto publish does not work. Call them Quarto Websites Introduction and Quarto Websites Advanced. Make them 28 and 29.

* Add a discussion of file downloading and computer organization to the Terminal tutorial. Include some questions in which a student has to create a new project and download some files to it, and prove that they have done so with file_show() and list.files(). Main motivation is that too many students, at least on Windows, can't do that.

* Maybe add another project to rstudio-and-github-b.

* Change RStudio and Code/Quarto and RStudio and Github to "Introduction" and "Adanced", just like we have with Websites.

* Add a new website project to second Websites tutorial which starts from the IDE and makes a new directory with git box checked, and then uses `usethis::use_github()` to connect to Github. It is useful to see this work, even if it is not our default strategy.


### Notes from DK

* Should we switch away from Rpubs and use something like `quarto publish quarto-pub document.qmd`, even in the early tutorials like RStudio and Code?

* It looks like quarto_create_project() will not be useful for us. The `name` argument serves two purposes. First, it give the name of the directory (which will be created) and in which the files will be placed. (The `dir` argument provides the directory in which this new directory will be created.) Second, it fills the "Title" field in both the _quarto.yml and the index.qmd files. This behavior does not work for us because we want to begin our process on with a Github repo and then connect that to the computer, therefore leaving us in a new directory in which we just want to drop the files.

* Would be cool to test commands which we expect students to enter into the Console. Of course, written questions don't allow for test chunks, but we can just make our own chunks, with include = FALSE. They will run during tutorial creation and fail if the command no longer works. Of course, in most cases, we would need to create, on the fly, the file which those commands access.

### Mark

Submit PR which fixes all the mistakes in chapter 1. 

Continue, submitting separate PRs for chapters 2 through 5.


### Sharav

Tutorial 24

* Find the complaints in Discord and email me the link. #tutorials channel? #general channel?
* Fix the complaints.
* general quality improvements, as with knowledge drops, typos and so on.s

Tutorial 26

* Find the complaints in Discord and email me the link. #tutorials channel? #general channel?
* Fix those complaints.
* Read: https://ppbds.github.io/tutorial.helpers/articles/books.html
* Re-read the chapter. Quality check for entire tutorial.


* Tighten some longer tutorials so that they are more like 60 minutes.

* Add positron tutorials as complements to RStudio Code/Github tutorials.

### Current items


### Specific Chapter Issues


Q&A sections, at least in RStudio and Code.

Make more use of https://ggplot2-book.org/ and https://docs.posit.co/ide/user/

Maybe much of the material in Quarto R4DS chapter belongs in RStudio and Github chapter, allowing Quarto tutorial to focus on projects.

Do RStudio and Code and RStudio and Github tutorials link up well together?

The styler package and its use seem important and worth discussing. See https://www.youtube.com/watch?v=_nAfJ-5nkcU&authuser=0 for other interesting options.


### Graduation Exercises

Jade's idea for "Exploration" sections at the end of each tutorial. Give students some choices. Let them explore. Let them make something. There is no wrong answer.

Might be nice if each middle chapter tutorial (like factors, dates and times, et cetera) finished with a beautiful plot which required the use of skills from that chapter to manipulate the data first. An example is babynames in Strings chapter.

Even better, instead of a line-by-line plot built in the tutorial, we should have students create this plot oustide of the tutorial. It should be an exercise, like RStudio and Github, which starts with a student making a repo, connecting it to an RStudio project, starting a quarto document, loading libraries and data, building a plot, rendering the document so it looks nice and then publishing the plot on the web. Students need more practice with all these steps.

One project might be: Make any plot you like! Maybe using `diamonds`. Maybe give some advice? Maybe a fork? Maybe Github pages? Would require creating an index.qmd. Maybe explain how to use the visual editor.

Don't forget to review stuff, like shortcut keys.

### Publishing Issues

Should we be exploring other ways, besides RPubs, of publishing individual pages? quarto publish quarto-pub quarto-1.qmd works! quarto publish gh-pages quarto-1.qmd also has real possibilities.

## Leftover Material from Chapter 29

Maybe find a home for this stuff?

The most important set of options controls if your code block is executed and what results are inserted in the finished report:

eval: false prevents code from being evaluated. (And obviously if the code is not run, no results will be generated). This is useful for displaying example code, or for disabling a large block of code without commenting each line.

include: false runs the code, but doesn’t show the code or results in the final document. Use this for setup code that you don’t want cluttering your report.

results: hide hides printed output; fig-show: hide hides plots.

error: true causes the render to continue even if code returns an error. This is rarely something you’ll want to include in the final version of your report, but can be very useful if you need to debug exactly what is going on inside your QMD. It’s also useful if you’re teaching R and want to deliberately include an error. The default, error: false causes rendering to fail if there is a single error in the document.

As you work more with knitr, you will discover that some of the default chunk options don’t fit your needs and you want to change them.

When inserting numbers into text, format() is your friend.

Lots more stuff on figures, caching, tables, et cetera.
